<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CI/CD using AWS CDK Workshop</title>
    <link>https://petrabarus.github.io/aws-cicd-cdk-workshop/</link>
    <description>Recent content on CI/CD using AWS CDK Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>id-id</language>
    <lastBuildDate>Tue, 03 Nov 2020 16:12:52 +0700</lastBuildDate><atom:link href="https://petrabarus.github.io/aws-cicd-cdk-workshop/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1. Cleaning Provisioned Resources</title>
      <link>https://petrabarus.github.io/aws-cicd-cdk-workshop/3-cleaning-up/1-cleaning-cdk-resources.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://petrabarus.github.io/aws-cicd-cdk-workshop/3-cleaning-up/1-cleaning-cdk-resources.html</guid>
      <description>In this part you will remove all resources that provisioned by AWS CDK.
STEP 1 In the terminal execute the command below. This will remove the stack that you created previously.
cdk destroy Input y when prompted &amp;ldquo;Are you sure you want to delete: MyappStack (y/n)?&amp;rdquo;.
The process will take a while.
STEP 2 Execute the command below to delete the CDK assets resources.
aws s3 rm --recursive s3://$(aws s3 ls | grep cdktoolkit | head -n 1 | cut -d&amp;#39; &amp;#39; -f3) aws cloudformation delete-stack --stack-name CDKToolkit Click the orange arrow on the right hand side to continue.</description>
    </item>
    
    <item>
      <title>1. Creating new CDK Application</title>
      <link>https://petrabarus.github.io/aws-cicd-cdk-workshop/2-workshop/1-creating-new-cdk-application.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://petrabarus.github.io/aws-cicd-cdk-workshop/2-workshop/1-creating-new-cdk-application.html</guid>
      <description>In this part you are going to create a new CDK application.
STEP 1 Create a new directory for the application.
mkdir myapp &amp;amp;&amp;amp; cd myapp STEP 2 initiate a new CDK application by executing command below.
cdk init app --language typescript You will notice new files and directory in the myapp directory.
STEP 3 Create a new terminal by clicking on the green cross, and click New Terminal.
STEP 4 In the new terminal, go to our app by executing this command.</description>
    </item>
    
    <item>
      <title>1. Setting Up AWS Cloud9</title>
      <link>https://petrabarus.github.io/aws-cicd-cdk-workshop/1-setting-up-environment/1-setting-up-cloud9.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://petrabarus.github.io/aws-cicd-cdk-workshop/1-setting-up-environment/1-setting-up-cloud9.html</guid>
      <description>Now you are going to provision your AWS Cloud9 Integrated Development Environment.
STEP 1 Go to AWS Cloud9 Console.
STEP 2 Click Create environment
STEP 3 Put &amp;ldquo;CICD-CDK-Workshop&amp;rdquo; or any name you like in the Name field. You can leave the description empty. Click Next step to proceed.
STEP 4 In the Environment settings, choose below configuration
 &amp;ldquo;Create a new EC2 instance for environment (direct access)&amp;rdquo; in the Environment type &amp;ldquo;t2.</description>
    </item>
    
    <item>
      <title>2. Creating CodeCommit Repository</title>
      <link>https://petrabarus.github.io/aws-cicd-cdk-workshop/2-workshop/2-creating-code-commit-repository-copy.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://petrabarus.github.io/aws-cicd-cdk-workshop/2-workshop/2-creating-code-commit-repository-copy.html</guid>
      <description>In this part, you are going to create an AWS CodeCommit repository. AWS CodeCommit is a fully-managed source control service that hosts secure Git-based repositories. It makes it easy for teams to collaborate on code in a secure and highly scalable ecosystem.
Provision AWS CodeCommit Repository STEP 1 Install AWS CodeCommit constructs for CDK by executing command below in our project directory.
npm i @aws-cdk/aws-codecommit STEP 2 You are going to provision a new CodeCommit repository using CDK.</description>
    </item>
    
    <item>
      <title>2. Deleting Cloud9 Environment</title>
      <link>https://petrabarus.github.io/aws-cicd-cdk-workshop/3-cleaning-up/2-deleting-cloud9-environment.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://petrabarus.github.io/aws-cicd-cdk-workshop/3-cleaning-up/2-deleting-cloud9-environment.html</guid>
      <description>In this part you will delete the AWS Cloud9 environment you created.
STEP 1 Open the Cloud9 console.
STEP 2 Choose the Cloud9 IDE that you created.
STEP 3 Click DELETE
STEP 4 When prompt on confirmation, type &amp;ldquo;Delete&amp;rdquo; and click button Delete to proceed.
Now you have clean up your resources and finished all the workshop.
Don&amp;rsquo;t forget to send feedback for future improvements! See you on the next workshop!</description>
    </item>
    
    <item>
      <title>2. Environment Check and Set Up</title>
      <link>https://petrabarus.github.io/aws-cicd-cdk-workshop/1-setting-up-environment/2-environment-check-and-setup.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://petrabarus.github.io/aws-cicd-cdk-workshop/1-setting-up-environment/2-environment-check-and-setup.html</guid>
      <description>Now you are going to check your environment to make sure you can use it to do the worksho.
Check NPM version You are going to need Node Package Manager to install CDK construct libraries in our project.
To check NPM version execute command below in the terminal.
npm --version The output should look a bit similar to this.
6.14.6 Check and Update CDK Now you need to make sure CDK is installed in our environment and update it to latest version.</description>
    </item>
    
    <item>
      <title>3. Creating ECS Cluster</title>
      <link>https://petrabarus.github.io/aws-cicd-cdk-workshop/2-workshop/3-creating-ecs-cluster.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://petrabarus.github.io/aws-cicd-cdk-workshop/2-workshop/3-creating-ecs-cluster.html</guid>
      <description>In this part, you are going to deploy a simple &amp;ldquo;Hello World&amp;rdquo; application to ECS cluster. Amazon ECS is a fully managed container orchestration service.
STEP 1 You are going to need ECS construct library and ECS Patterns L3 constructs library. ECS Patterns library provides higher-level Amazon ECS constructs which follow common architectural patterns.
Execute command below.
npm i @aws-cdk/aws-ecs @aws-cdk/aws-ecs-patterns STEP 2 Add Dockerfile in the project root. This will define our container that serves a &amp;ldquo;Hello World&amp;rdquo; HTML file.</description>
    </item>
    
    <item>
      <title>4. Creating ECR Container Image Repository</title>
      <link>https://petrabarus.github.io/aws-cicd-cdk-workshop/2-workshop/4-creating-ecr-repository.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://petrabarus.github.io/aws-cicd-cdk-workshop/2-workshop/4-creating-ecr-repository.html</guid>
      <description>In this part you will create an ECR container image repository. Amazon Elastic Container Registry (ECR) is a fully-managed Docker container registry that makes it easy for developers to store, manage, and deploy Docker container images. Amazon ECR is integrated with Amazon Elastic Container Service (ECS), simplifying your development to production workflow.
STEP 1 You are going to need to install ECR construct library. Execute the following command.
npm i @aws-cdk/aws-ecr STEP 2 Overwrite file lib/myapp-stack.</description>
    </item>
    
    <item>
      <title>5. Creating Build Pipeline</title>
      <link>https://petrabarus.github.io/aws-cicd-cdk-workshop/2-workshop/5-creating-build-pipeline.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://petrabarus.github.io/aws-cicd-cdk-workshop/2-workshop/5-creating-build-pipeline.html</guid>
      <description>In this step, you are going to create a CI/CD pipeline where you will build a container image on new commit and store the image in our new ECR repository.
AWS CodePipeline is a fully managed continuous delivery service that helps you automate your release pipelines for fast and reliable application and infrastructure updates. CodePipeline automates the build, test, and deploy phases of your release process every time there is a code change, based on the release model you define.</description>
    </item>
    
    <item>
      <title>6. Creating Deploy Stage</title>
      <link>https://petrabarus.github.io/aws-cicd-cdk-workshop/2-workshop/6-creating-deploy-pipeline.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://petrabarus.github.io/aws-cicd-cdk-workshop/2-workshop/6-creating-deploy-pipeline.html</guid>
      <description>In this part you are going to create a final stage of the pipeline &amp;ldquo;Deploy&amp;rdquo; where the newly created image will be deployed to the ECS cluster.
STEP 1
import * as cdk from &amp;#39;@aws-cdk/core&amp;#39;; import * as codecommit from &amp;#39;@aws-cdk/aws-codecommit&amp;#39;; import * as ecs from &amp;#39;@aws-cdk/aws-ecs&amp;#39;; import * as ecsPatterns from &amp;#39;@aws-cdk/aws-ecs-patterns&amp;#39;; import * as ecr from &amp;#39;@aws-cdk/aws-ecr&amp;#39;; import * as codebuild from &amp;#39;@aws-cdk/aws-codebuild&amp;#39;; import * as codepipeline from &amp;#39;@aws-cdk/aws-codepipeline&amp;#39;; import * as codepipelineActions from &amp;#39;@aws-cdk/aws-codepipeline-actions&amp;#39;; export class MyappStack extends cdk.</description>
    </item>
    
  </channel>
</rss>
