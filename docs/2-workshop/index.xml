<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Workshop on CI/CD using AWS CDK Workshop</title>
    <link>https://petrabarus.github.io/aws-cicd-cdk-workshop/2-workshop.html</link>
    <description>Recent content in Workshop on CI/CD using AWS CDK Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>id-id</language>
    <lastBuildDate>Tue, 03 Nov 2020 16:12:32 +0700</lastBuildDate><atom:link href="https://petrabarus.github.io/aws-cicd-cdk-workshop/2-workshop/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1. Creating new CDK Application</title>
      <link>https://petrabarus.github.io/aws-cicd-cdk-workshop/2-workshop/1-creating-new-cdk-application.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://petrabarus.github.io/aws-cicd-cdk-workshop/2-workshop/1-creating-new-cdk-application.html</guid>
      <description>STEP 1 Create a new directory for the application.
mkdir myapp &amp;amp;&amp;amp; cd myapp STEP 2 initiate a new CDK application by executing command below.
cdk init app --language typescript STEP 3 Create a new terminal by clicking on the green cross, and click New Terminal.
STEP 4 In the new terminal, go to our app by executing this command.
cd myapp STEP 5 You need to compile your Typescript code to Javascript everytime you create or update a Typescript file.</description>
    </item>
    
    <item>
      <title>2. Creating CodeCommit Repository</title>
      <link>https://petrabarus.github.io/aws-cicd-cdk-workshop/2-workshop/2-creating-code-commit-repository-copy.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://petrabarus.github.io/aws-cicd-cdk-workshop/2-workshop/2-creating-code-commit-repository-copy.html</guid>
      <description>In this part, you are going to create an AWS CodeCommit repository. AWS CodeCommit is a fully-managed source control service that hosts secure Git-based repositories. It makes it easy for teams to collaborate on code in a secure and highly scalable ecosystem.
Provision AWS CodeCommit Repository STEP 1 Install AWS CodeCommit constructs for CDK by executing command below in our project directory.
npm i @aws-cdk/aws-codecommit STEP 2 You are going to provision a new CodeCommit repository using CDK.</description>
    </item>
    
    <item>
      <title>3. Creating ECS Cluster</title>
      <link>https://petrabarus.github.io/aws-cicd-cdk-workshop/2-workshop/3-creating-ecs-cluster.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://petrabarus.github.io/aws-cicd-cdk-workshop/2-workshop/3-creating-ecs-cluster.html</guid>
      <description>In this part, you are going to deploy a simple &amp;ldquo;Hello World&amp;rdquo; application to ECS cluster. Amazon ECS is a fully managed container orchestration service.
STEP 1 You are going to need ECS construct library and ECS Patterns L3 constructs library. ECS Patterns library provides higher-level Amazon ECS constructs which follow common architectural patterns.
Execute command below.
npm i @aws-cdk/aws-ecs @aws-cdk/aws-ecs-patterns STEP 2 Add Dockerfile in the project root. This will define our container that serves a &amp;ldquo;Hello World&amp;rdquo; HTML file.</description>
    </item>
    
    <item>
      <title>4. Creating ECR Container Image Repository</title>
      <link>https://petrabarus.github.io/aws-cicd-cdk-workshop/2-workshop/4-creating-ecr-repository.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://petrabarus.github.io/aws-cicd-cdk-workshop/2-workshop/4-creating-ecr-repository.html</guid>
      <description>In this part you will create an ECR container image repository. Amazon Elastic Container Registry (ECR) is a fully-managed Docker container registry that makes it easy for developers to store, manage, and deploy Docker container images. Amazon ECR is integrated with Amazon Elastic Container Service (ECS), simplifying your development to production workflow.
STEP 1 You are going to need to install ECR construct library. Execute the following command.
npm i @aws-cdk/aws-ecr STEP 2 Overwrite file lib/myapp-stack.</description>
    </item>
    
    <item>
      <title>5. Creating Build Pipeline</title>
      <link>https://petrabarus.github.io/aws-cicd-cdk-workshop/2-workshop/5-creating-build-pipeline.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://petrabarus.github.io/aws-cicd-cdk-workshop/2-workshop/5-creating-build-pipeline.html</guid>
      <description>In this step, you are going to create a CI/CD pipeline where you will build a container image on new commit and store the image in our new ECR repository.
AWS CodePipeline is a fully managed continuous delivery service that helps you automate your release pipelines for fast and reliable application and infrastructure updates. CodePipeline automates the build, test, and deploy phases of your release process every time there is a code change, based on the release model you define.</description>
    </item>
    
    <item>
      <title>6. Creating Deploy Stage</title>
      <link>https://petrabarus.github.io/aws-cicd-cdk-workshop/2-workshop/6-creating-deploy-pipeline.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://petrabarus.github.io/aws-cicd-cdk-workshop/2-workshop/6-creating-deploy-pipeline.html</guid>
      <description>In this part you are going to create a final stage of the pipeline &amp;ldquo;Deploy&amp;rdquo; where the newly created image will be deployed to the ECS cluster.
STEP 1
import * as cdk from &amp;#39;@aws-cdk/core&amp;#39;; import * as codecommit from &amp;#39;@aws-cdk/aws-codecommit&amp;#39;; import * as ecs from &amp;#39;@aws-cdk/aws-ecs&amp;#39;; import * as ecsPatterns from &amp;#39;@aws-cdk/aws-ecs-patterns&amp;#39;; import * as ecr from &amp;#39;@aws-cdk/aws-ecr&amp;#39;; import * as codebuild from &amp;#39;@aws-cdk/aws-codebuild&amp;#39;; import * as codepipeline from &amp;#39;@aws-cdk/aws-codepipeline&amp;#39;; import * as codepipelineActions from &amp;#39;@aws-cdk/aws-codepipeline-actions&amp;#39;; export class MyappStack extends cdk.</description>
    </item>
    
  </channel>
</rss>
